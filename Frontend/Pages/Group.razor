@page "/Group/{groupId:guid}"

@using Frontend.Providers
@using Frontend.Components.Groups
@using Frontend.Services
@using Microsoft.AspNetCore.Authorization
@using Entities.Dto.GroupDto
@inject UserApiService _userApiService
@inject GroupService _groupService
@attribute [Authorize]

@{
    var foundGroup = GetFoundGroup();
}
@if (foundGroup == null)
{
    return;
}

<GroupTitle Group="@foundGroup"/>
<GroupUsers Group="@foundGroup"/>
<GroupSettlement Group="@foundGroup"/>
<GroupPayments Group="@foundGroup"/>


@code {

    [Parameter]
    public Guid GroupId { get; set; }

    [CascadingParameter]
    public GroupServiceProvider GroupServiceProvider { get; set; }

    private SinglePurposeUserGroupDto GetFoundGroup() =>
        GroupServiceProvider.UserGroups.FirstOrDefault(group => group.Id == GroupId);

    protected override async Task OnInitializedAsync()
    {
        await Task.WhenAll(_groupService.LoadAll(), _userApiService.LoadCurrent());
    }

}