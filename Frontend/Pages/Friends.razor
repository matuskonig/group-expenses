@page "/Friends"
@using Frontend.Providers
@using Frontend.Services
@using Entities.AuthDto
@using Entities.Enums
@using Frontend.Extensions
@using Frontend.Components
@using Microsoft.AspNetCore.Authorization
@using Frontend.Components.UI
@using Frontend.Constants
@inject UserApiService _userApiService
@attribute [Authorize]

<UserSearch/>

@{
    var incomingRequests = GetIncomingRequests();
}

@if (incomingRequests?.Any() ?? false)
{
    <h2>Incoming requests</h2>
    <ul class="list-group">
        @foreach (var incomingRequest in incomingRequests)
        {
            <li class="list-group-item">
                @incomingRequest.From.UserName
                <PrimaryIconButton Icon="@IconName.Check" @onclick="() => AcceptRequest(incomingRequest)"/>
                <DangerIconButton Icon="@IconName.X" @onclick="() => RejectRequest(incomingRequest)"/>
            </li>
        }
    </ul>
}
@{
    var friends = GetFriends();
}

@if (friends?.Any() ?? false)
{
    <h2>Friends</h2>
    <ul class="list-group">
        @foreach (var friendUser in friends)
        {
            <li class="list-group-item">
                @friendUser.UserName
                <DangerIconButton Icon="@IconName.Trash" @onclick="() => Unfriend(friendUser)"/>
            </li>
        }
    </ul>
}



@code {

    [CascadingParameter]
    public CurrentUserProvider UserProvider { get; set; }

    [CascadingParameter]
    public AuthStateProvider AuthStateProvider { get; set; }

    private IEnumerable<FriendRequestDto> GetIncomingRequests() =>
        UserProvider?.CurrentUser?.IncomingRequests
            ?.Where(request => request.State == FriendRequestState.WaitingForAccept);


    private IEnumerable<UserDto> GetFriends() => UserProvider?.CurrentUser?.Friends();

    protected override async Task OnInitializedAsync()
    {
        if (AuthStateProvider.IsLoggedIn)
            await _userApiService.LoadCurrent();
    }

    private async Task AcceptRequest(FriendRequestDto friendRequest)
    {
        await _userApiService.AcceptFriendRequest(friendRequest);
        await _userApiService.LoadCurrent();
    }

    private async Task RejectRequest(FriendRequestDto friendRequestDto)
    {
        await _userApiService.RejectFriendRequest(friendRequestDto);
        await _userApiService.LoadCurrent();
    }

    private async Task Unfriend(UserDto user)
    {
        var possibleSentRequest = _userApiService.CurrentUser.SentRequests
            .FirstOrDefault(request => request.To.Id == user.Id && request.State == FriendRequestState.Accepted);
        var possibleReceivedRequest = _userApiService.CurrentUser.IncomingRequests
            .FirstOrDefault(request => request.From.Id == user.Id && request.State == FriendRequestState.Accepted);
        var possibleRequest = possibleSentRequest ?? possibleReceivedRequest;
        if (possibleRequest == null)
            return;
        await _userApiService.RejectFriendRequest(possibleRequest);
        await _userApiService.LoadCurrent();
    }

}