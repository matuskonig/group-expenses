@using Frontend.Services
@using Entities.AuthDto
@implements IDisposable
@inject AuthApiService _authApiService
@inject NavigationManager _navigationManager

<CascadingValue Value="@this">
    @ChildContent
</CascadingValue>

@code {

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public RenderFragment NotLoggedInDefault { get; set; }

    public bool IsLoggedIn => _authApiService.JwtSecurityToken?.ValidTo > DateTime.Now;

    public async Task Login(LoginRequest request)
    {
        await _authApiService.Login(request);
        _navigationManager.NavigateTo("/");
    }


    public void Logout()
    {
        _authApiService.Logout();
    }

    protected override void OnInitialized()
    {
        _authApiService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        _authApiService.OnChange -= StateHasChanged;
    }

}