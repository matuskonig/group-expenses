@using Frontend.Services
@using Entities.Dto.AuthDto
@implements IDisposable
@inject AuthApiService _authApiService
@inject NavigationManager _navigationManager

<CascadingValue Value="@this">
    @ChildContent
</CascadingValue>

@code {

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    // Check token validity if is present, if the token is not present, false is returned
    public bool IsLoggedIn => _authApiService.LoginResponse?.Expiration > DateTime.Now;

    public async Task Login(LoginRequest request)
    {
        if (await _authApiService.Login(request))
            _navigationManager.NavigateTo("/");
    }


    public void Logout()
    {
        _authApiService.Logout();
    }

    // Subscription to service data changes
    protected override void OnInitialized()
    {
        _authApiService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        _authApiService.OnChange -= StateHasChanged;
    }

}