@using Frontend.Services
@using Entities.AuthDto
@implements IDisposable
@inject AuthApiService authApiService
@inject NavigationManager navigationManager

<CascadingValue Value="@this">
    @ChildContent
</CascadingValue>

@code {

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public RenderFragment NotLoggedInDefault { get; set; }
    
    public bool IsLoggedIn => authApiService.JwtSecurityToken?.ValidTo > DateTime.Now;

    public async Task Login(LoginRequest request)
    {
        try
        {
            await authApiService.Login(request);
            navigationManager.NavigateTo("Dashboard");
            Console.WriteLine(IsLoggedIn);
        }
        catch (Exception e)
        {
            Console.WriteLine("something is wrong");
            Console.WriteLine(e.Message);
        }
    }

    
    public void Logout()
    {
        authApiService.Logout();
    }
    protected override void OnInitialized()
    {
        authApiService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        authApiService.OnChange -= StateHasChanged;
    }

}