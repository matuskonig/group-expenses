@using Entities.GroupDto
@using Entities.AuthDto
@using Frontend.Constants
@using Frontend.Providers
@using Frontend.Components.UI

<OpenableDialog Context="singlePaymentDialogContext">
    <Opener>
        <PrimaryIconButton @onclick="@singlePaymentDialogContext.OpenDialog" Icon="@Icon"/>
    </Opener>
    <Title>
        @DialogTitle
    </Title>
    <ChildContent>
        <dl class="row">
            <dt class="col-sm-6">Price</dt>
            <dd class="col-sm-6">
                <EditForm Model="@_model">
                    <InputNumber @bind-Value="@_model.Price"/>
                </EditForm>
            </dd>

            <dt class="col-sm-6">Payment to:</dt>
            <dd class="col-sm-6">
                <div class="flex-space-between">
                    <span>@(_model?.Target?.UserName ?? "-")</span>
                    <UserSelectDialog
                        SelectedUserId="@_model?.Target?.Id"
                        DialogTitle="Select payment target"
                        Icon="@IconName.Pencil"
                        Users="@GetPossibleUsers()"
                        OnSubmit="@ModelTargetChanged"/>
                </div>
            </dd>
        </dl>

        <PrimaryButton @onclick="() => HandleSubmit(singlePaymentDialogContext)">Submit</PrimaryButton>
    </ChildContent>
</OpenableDialog>

@code {

    [Parameter]
    public string Icon { get; set; }

    [Parameter]
    public string DialogTitle { get; set; }

    [Parameter]
    public SinglePaymentDto SinglePayment { get; set; }

    [Parameter]
    public SinglePurposeUserGroupDto Group { get; set; }

    [Parameter]
    public EventCallback<SinglePaymentDto> OnSubmit { get; set; }

    [Parameter]
    public UnidirectionalPaymentGroupDto PaymentGroup { get; set; }

    private IEnumerable<UserDto> GetPossibleUsers()
    {
        return Group?.GroupUsers?.Where(user => user.Id != PaymentGroup?.PaymentBy?.Id);
    }

    private SinglePaymentDto _model = new();

    protected override void OnInitialized()
    {
        if (SinglePayment != null)
            _model = SinglePayment;
    }

    private void ModelTargetChanged(UserDto user)
    {
        _model.Target = user;
    }

    private async Task HandleSubmit(OpenableDialog dialogContext)
    {
        await OnSubmit.InvokeAsync(_model);
        dialogContext.CloseDialog();
        _model = new SinglePaymentDto();
    }

}