@using Entities.GroupDto
@using Frontend.Providers
@using Entities.AuthDto
@using Frontend.Constants
@using Frontend.Components.UI

<OpenableDialog >
    <Opener>
        <PrimaryIconButton @onclick="@context.OpenDialog" Icon="@Icon"/>
    </Opener>
    <Title>
        @Title
    </Title>
    <ChildContent>
        <dl class="row">
            <dt class="col-sm-6">Group name:</dt>
            <dd class="col-sm-6">
                <div class="flex-space-between">
                    <span>@(PaymentGroup.Name ?? "-")</span>
                    <GroupNameDialog
                        PaymentGroup="@PaymentGroup"
                        OnSubmit="@OnGroupNameChange"/>
                </div>
            </dd>

            <dt class="col-sm-6">Payment by:</dt>
            <dd class="col-sm-6">
                <div class="flex-space-between">
                    <span>@(PaymentGroup?.PaymentBy?.UserName ?? "-")</span>
                    <UserSelectDialog
                        Icon="@IconName.Pencil"
                        DialogTitle="Set payer"
                        Users="@Group.GroupUsers"
                        SelectedUserId="@PaymentGroup?.PaymentBy?.Id"
                        OnSubmit="@OnPayerUserSelect"/>
                </div>

            </dd>

            <dt class="col-sm-6">Payment targets:</dt>
            <dd class="col-sm-6">
                <div class="mb-2">
                    <SinglePaymentDialog
                        DialogTitle="Add new payment"
                        Icon="@IconName.Plus"
                        Group="@Group"
                        PaymentGroup="@PaymentGroup"
                        OnSubmit="@OnNewSinglePaymentAdded"/>
                </div>

                @if (PaymentGroup?.PaymentTargets != null)
                {
                    <ul class="list-group max-content-container">
                        @foreach (var payment in PaymentGroup.PaymentTargets)
                        {
                            <li class="list-group-item flex-space-between">
                                <span>@payment.Price - @payment.Target.UserName</span>
                                <span>
                                    <SinglePaymentDialog
                                        DialogTitle="Edit payment"
                                        Icon="@IconName.Pencil"
                                        Group="@Group"
                                        PaymentGroup="@PaymentGroup"
                                        SinglePayment="@payment"
                                        OnSubmit="@OnEditPayment"/>
                                    <DangerIconButton
                                        @onclick="() => OnRemoveExistingPayment.InvokeAsync(payment)"
                                        Icon="@IconName.Trash"/>
                                </span>
                            </li>
                        }
                    </ul>
                }
            </dd>
        </dl>


        @if (OnSubmit.HasDelegate)
        {
            <PrimaryButton @onclick="() => HandleSubmit(context)">Submit</PrimaryButton>
        }
    </ChildContent>
</OpenableDialog>

@code {

    [CascadingParameter]
    public CurrentUserProvider CurrentUserProvider { get; set; }

    [Parameter]
    public string Icon { get; set; }

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public SinglePurposeUserGroupDto Group { get; set; }

    [Parameter]
    public EventCallback<SinglePaymentDto> OnRemoveExistingPayment { get; set; }

    [Parameter]
    public EventCallback<SinglePaymentDto> OnEditPayment { get; set; }

    [Parameter]
    public EventCallback<UserDto> OnPayerUserSelect { get; set; }

    [Parameter]
    public EventCallback<UnidirectionalPaymentGroupDto> OnSubmit { get; set; }

    [Parameter]
    public EventCallback<SinglePaymentDto> OnNewSinglePaymentAdded { get; set; }

    [Parameter]
    public EventCallback<UnidirectionalPaymentGroupDto> OnGroupNameChange { get; set; }

    [Parameter]
    public UnidirectionalPaymentGroupDto PaymentGroup { get; set; }


    private async Task HandleSubmit(OpenableDialog dialogContext)
    {
        if (OnSubmit.HasDelegate)
        {
            await OnSubmit.InvokeAsync();
        }
        dialogContext.CloseDialog();
    }

}