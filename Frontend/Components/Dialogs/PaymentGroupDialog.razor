@using Entities.GroupDto
@using Frontend.Providers
@using Entities.AuthDto
@using Frontend.Constants
@using Frontend.Components.UI

<OpenableDialog >
    <Opener>
        <PrimaryIconButton OnClick="@context.OpenDialog" Icon="@Icon"/>
    </Opener>
    <Title>
        @Title
    </Title>
    <ChildContent>
        <dl class="row">
            <dt class="col-sm-6">Group name:</dt>
            <dd class="col-sm-6">
                @(PaymentGroup.Name ?? "-")
                <GroupNameDialog
                    PaymentGroup="@PaymentGroup"
                    OnSubmit="@OnGroupNameChange"/>
            </dd>

            <dt class="col-sm-6">Payment by:</dt>
            <dd class="col-sm-6">
                @(PaymentGroup?.PaymentBy?.UserName ?? "-")
                <UserSelectDialog
                    Icon="@IconName.Pencil"
                    DialogTitle="Set payer user"
                    Users="@Group.GroupUsers"
                    SelectedUserId="@PaymentGroup?.PaymentBy?.Id"
                    OnSubmit="@OnPayerUserSelect"/>
            </dd>

            <dt class="col-sm-6">Payment targets:</dt>
            <dd class="col-sm-6">
                <SinglePaymentDialog
                    DialogTitle="Add new payment"
                    Icon="@IconName.Plus"
                    Group="@Group"
                    PaymentGroup="@PaymentGroup"
                    OnSubmit="@OnNewSinglePaymentAdded"/>
                @if (PaymentGroup?.PaymentTargets != null)
                {
                    <ul class="list-group">
                        @foreach (var payment in PaymentGroup.PaymentTargets)
                        {
                            <li class="list-group-item">
                                @payment.Price - @payment.Target.UserName
                                <SinglePaymentDialog
                                    DialogTitle="Edit payment"
                                    Icon="@IconName.Pencil"
                                    Group="@Group"
                                    PaymentGroup="@PaymentGroup"
                                    SinglePayment="@payment"
                                    OnSubmit="@OnEditPayment"/>
                                <DangerIconButton
                                    OnClick="() => OnRemoveExistingPayment.InvokeAsync(payment)"
                                    Icon="@IconName.Trash"/>
                            </li>
                        }
                    </ul>
                }
            </dd>
        </dl>


        @if (OnSubmit.HasDelegate)
        {
            <PrimaryButton OnClick="() => HandleSubmit(context)">Submit</PrimaryButton>
        }
    </ChildContent>
</OpenableDialog>

@code {

    [CascadingParameter]
    public CurrentUserProvider CurrentUserProvider { get; set; }

    [Parameter]
    public string Icon { get; set; }

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public SinglePurposeUserGroupDto Group { get; set; }

    [Parameter]
    public EventCallback<SinglePaymentDto> OnRemoveExistingPayment { get; set; }

    [Parameter]
    public EventCallback<SinglePaymentDto> OnEditPayment { get; set; }

    [Parameter]
    public EventCallback<UserDto> OnPayerUserSelect { get; set; }

    [Parameter]
    public EventCallback<UnidirectionalPaymentGroupDto> OnSubmit { get; set; }

    [Parameter]
    public EventCallback<SinglePaymentDto> OnNewSinglePaymentAdded { get; set; }

    [Parameter]
    public EventCallback<UnidirectionalPaymentGroupDto> OnGroupNameChange { get; set; }

    [Parameter]
    public UnidirectionalPaymentGroupDto PaymentGroup { get; set; }


    private async Task HandleSubmit(OpenableDialog dialogContext)
    {
        if (OnSubmit.HasDelegate)
        {
            await OnSubmit.InvokeAsync();
        }
        dialogContext.CloseDialog();
    }

}