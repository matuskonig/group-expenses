@using Entities.GroupDto
@using Entities.AuthDto
@using Frontend.Services
@using Frontend.Helpers
@using Frontend.Components.Dialogs
@using Frontend.Extensions
@using Frontend.Providers
@using Frontend.Components.UI
@using Frontend.Constants
@inject GroupService _groupService

<h4>Users</h4>

<div class="mb-2">
    <UserSelectDialog
        Icon="oi-plus"
        DialogTitle="Add user"
        Users="@GetPossibleNewUsers()"
        OnSubmit="@HandleAddNewFriend"/>
</div>

<ul class="list-group w-50">
    @foreach (var user in Group.GroupUsers)
    {
        <li class="list-group-item">
            @user.UserName &nbsp;
            <DangerIconButton OnClick="() => RemoveUserFromGroup(user)" Icon="@IconName.Trash"/>
        </li>
    }
</ul>




@code {
    private PropertyEqualityComparer<UserDto, string> _userByIdComparer = new(user => user.Id);

    [Parameter]
    public SinglePurposeUserGroupDto Group { get; set; }

    [CascadingParameter]
    public CurrentUserProvider CurrentUserProvider { get; set; }

    private PropertyEqualityComparer<UserDto, string> _userComparer = new(user => user.Id);

    private async Task RemoveUserFromGroup(UserDto userDto) {
        await _groupService.ModifyUserGroup(new SinglePurposeUserGroupDto
        {
            Id = Group.Id,
            GroupUsers = Group.GroupUsers
                .Except(new[] { userDto }, _userComparer)
        });
        await _groupService.LoadAll();
    }
    
    private IEnumerable<UserDto> GetPossibleNewUsers()
    {
        return CurrentUserProvider
            ?.CurrentUser
            ?.Friends()
            ?.Except(Group.GroupUsers, _userByIdComparer)
            .OrderBy(user => user.UserName) ?? Enumerable.Empty<UserDto>();
    }

    private async Task HandleAddNewFriend(UserDto user)
    {
        await _groupService.ModifyUserGroup(new SinglePurposeUserGroupDto
        {
            Id = Group.Id,
            GroupUsers = Group.GroupUsers.Append(user)
        });
        await _groupService.LoadAll();
    }

}