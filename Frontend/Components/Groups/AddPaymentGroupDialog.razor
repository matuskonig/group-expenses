@using Frontend.Components.Dialogs
@using Frontend.Providers
@using Entities.Dto.GroupDto
@using Frontend.Constants
@using Frontend.Services
@using Entities.Dto.AuthDto
@inject GroupService _groupService

<PaymentGroupDialog
    Icon="@IconName.Plus"
    Group="@Group"
    PaymentGroup="@_paymentGroup"
    Title="Add new payment"
    OnSubmit="@HandleSubmit"
    OnEditPayment="@HandleEditPayment"
    OnPayerUserSelect="@HandlePayerUserSelect"
    OnRemoveExistingPayment="@HandleRemoveExistingPayment"
    OnNewSinglePaymentAdded="@HandleNewSinglePaymentAdded"
    OnGroupNameChange="@HandleGroupNameChange"/>

@code {
    // Owning payment group
    [Parameter]
    public SinglePurposeUserGroupDto Group { get; set; }

    private UnidirectionalPaymentGroupDto _paymentGroup = NewPaymentGroup();

    private void HandleRemoveExistingPayment(SinglePaymentDto payment)
    {
        _paymentGroup.PaymentTargets = _paymentGroup.PaymentTargets.Except(new[] { payment });
    }

    private void HandleEditPayment(SinglePaymentDto paymentToEdit)
    {
        _paymentGroup.PaymentTargets = _paymentGroup.PaymentTargets.Select(payment => payment == paymentToEdit ? paymentToEdit : payment);
    }

    private static UnidirectionalPaymentGroupDto NewPaymentGroup() => new()
    {
        PaymentTargets = Enumerable.Empty<SinglePaymentDto>()
    };

    // Creates a new UnidirectionalPaymentGroup and appends it to the SinglePurposePaymentGroup
    private async Task HandleSubmit()
    {
        await _groupService.ModifyUserGroup(new SinglePurposeUserGroupDto
        {
            Id = Group.Id,
            GroupPayments = Group.GroupPayments.Append(_paymentGroup)
        });
        await _groupService.LoadAll();
        _paymentGroup = NewPaymentGroup();
    }

    private void HandlePayerUserSelect(UserDto user)
    {
        _paymentGroup.PaymentBy = user;
    }

    private void HandleNewSinglePaymentAdded(SinglePaymentDto payment)
    {
        _paymentGroup.PaymentTargets = _paymentGroup.PaymentTargets.Append(payment);
    }

    private void HandleGroupNameChange(UnidirectionalPaymentGroupDto paymentGroup)
    {
        _paymentGroup.Name = paymentGroup.Name;
    }
}