@using Frontend.Components.UI
@using System.ComponentModel.DataAnnotations
@using Entities.Dto.AuthDto

<EditForm Model="@_model" OnValidSubmit="@HandleSubmit">
    <DataAnnotationsValidator/>
    <ValidationSummary/>
    <div class="flex-space-between">
        <div>
            <label for="userSelect">User: </label>
            <InputSelect id="userSelect" @bind-Value="@_model.SelectedUserId">
                @* empty (null) option *@
                <option value=""></option>
                @foreach (var user in Users)
                {
                    // Workaround with user.Id due to incapability to use the user object directly
                    <option value="@user.Id">@user.UserName</option>
                }
            </InputSelect>
        </div>

        <PrimaryButton type="submit">@SubmitTitle</PrimaryButton>
    </div>
</EditForm>

@code {

    // Event handler consuming selected user
    [Parameter]
    public EventCallback<UserDto> OnSubmit { get; set; }

    [Parameter]
    public IEnumerable<UserDto> Users { get; set; }

    [Parameter]
    public string SelectedUserId { get; set; }

    [Parameter]
    public string SubmitTitle { get; set; }

    private FormModel _model = new();

    // Pass the selected user to the handler
    private async Task HandleSubmit()
    {
        var user = Users.FirstOrDefault(user => user.Id == _model.SelectedUserId);
        await OnSubmit.InvokeAsync(user);
    }

    protected override void OnInitialized()
    {
        // Case for updating fields, where user is already preselected
        if (SelectedUserId != null)
        {
            _model.SelectedUserId = SelectedUserId;
        }
    }

    private class FormModel
    {
        [Required(ErrorMessage = "User must be selected")]
        public string SelectedUserId { get; set; }
    }

}